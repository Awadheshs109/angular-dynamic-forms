{"version":3,"file":"dynamic-form-template.mjs","sources":["../../../projects/dynamic-form/src/lib/dynamic-form.service.ts","../../../projects/dynamic-form/src/lib/form-service.service.ts","../../../projects/dynamic-form/src/lib/dynamic-form.component.ts","../../../projects/dynamic-form/src/lib/dynamic-form.component.html","../../../projects/dynamic-form/src/lib/dynamic-form.module.ts","../../../projects/dynamic-form/src/public-api.ts","../../../projects/dynamic-form/src/dynamic-form-template.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamicFormService {\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormService {\r\n  formStructure = [\r\n    {\r\n      \"type\": \"text\",\r\n      \"label\": \"Full Name\",\r\n      \"name\": \"fullName\",\r\n      \"value\": \"\",\r\n      \"validations\": [\r\n        {\r\n          \"name\": \"required\",\r\n          \"validator\": \"required\",\r\n          \"message\": \"Name is required\"\r\n        },\r\n        {\r\n          \"name\": \"minlength\",\r\n          \"validator\": \"minLength\",\r\n          \"value\": 3,\r\n          \"message\": \"Name must be at least 3 characters\"\r\n        },\r\n        {\r\n          \"name\": \"maxlength\",\r\n          \"validator\": \"maxLength\",\r\n          \"value\": 30,\r\n          \"message\": \"Name cannot exceed 30 characters\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"email\",\r\n      \"label\": \"Email Address\",\r\n      \"name\": \"email\",\r\n      \"value\": \"\",\r\n      \"validations\": [\r\n        {\r\n          \"name\": \"required\",\r\n          \"validator\": \"required\",\r\n          \"message\": \"Email is required\"\r\n        },\r\n        {\r\n          \"name\": \"email\",\r\n          \"validator\": \"email\",\r\n          \"message\": \"Invalid email format\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"number\",\r\n      \"label\": \"Age\",\r\n      \"name\": \"age\",\r\n      \"value\": \"\",\r\n      \"validations\": [\r\n        {\r\n          \"name\": \"min\",\r\n          \"validator\": \"min\",\r\n          \"value\": 18,\r\n          \"message\": \"Age must be at least 18\"\r\n        },\r\n        {\r\n          \"name\": \"max\",\r\n          \"validator\": \"max\",\r\n          \"value\": 99,\r\n          \"message\": \"Age must be less than 100\"\r\n        },\r\n        {\r\n          \"name\": \"required\",\r\n          \"validator\": \"required\",\r\n          \"message\": \"Age is required\"\r\n        },\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"password\",\r\n      \"label\": \"Password\",\r\n      \"name\": \"password\",\r\n      \"value\": \"\",\r\n      \"validations\": [\r\n        {\r\n          \"name\": \"required\",\r\n          \"validator\": \"required\",\r\n          \"message\": \"Password is required\"\r\n        },\r\n        {\r\n          \"name\": \"pattern\",\r\n          \"validator\": \"pattern\",\r\n          \"value\": \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d).{8,}$\",\r\n          \"message\": \"Password must contain at least 8 characters, one uppercase, one lowercase, and one number\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"select\",\r\n      \"label\": \"Country\",\r\n      \"name\": \"country\",\r\n      \"value\": \"\",\r\n      \"options\": [\r\n        {\"label\": \"Select Country\", \"value\": \"\"},\r\n        {\"label\": \"United States\", \"value\": \"US\"},\r\n        {\"label\": \"Canada\", \"value\": \"CA\"},\r\n        {\"label\": \"United Kingdom\", \"value\": \"UK\"},\r\n        {\"label\": \"Australia\", \"value\": \"AU\"}\r\n      ],\r\n      \"validations\": [\r\n        {\r\n          \"name\": \"required\",\r\n          \"validator\": \"required\",\r\n          \"message\": \"Country is required\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"radio\",\r\n      \"label\": \"Gender\",\r\n      \"name\": \"gender\",\r\n      \"value\": \"\",\r\n      \"options\": [\r\n        {\"label\": \"Male\", \"value\": \"male\"},\r\n        {\"label\": \"Female\", \"value\": \"female\"},\r\n        {\"label\": \"Other\", \"value\": \"other\"}\r\n      ],\r\n      \"validations\": [\r\n        {\r\n          \"name\": \"required\",\r\n          \"validator\": \"required\",\r\n          \"message\": \"Gender is required\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"checkbox\",\r\n      \"label\": \"Subscribe to Newsletter\",\r\n      \"name\": \"newsletter\",\r\n      \"value\": false\r\n    },\r\n    {\r\n      \"type\": \"checkbox-group\",\r\n      \"label\": \"Interests\",\r\n      \"name\": \"interests\",\r\n      \"options\": [\r\n        {\"label\": \"Technology\", \"value\": \"tech\", \"checked\": false},\r\n        {\"label\": \"Sports\", \"value\": \"sports\", \"checked\": false},\r\n        {\"label\": \"Music\", \"value\": \"music\", \"checked\": false},\r\n        {\"label\": \"Travel\", \"value\": \"travel\", \"checked\": false}\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"textarea\",\r\n      \"label\": \"Bio\",\r\n      \"name\": \"bio\",\r\n      \"value\": \"\",\r\n      \"validations\": [\r\n        {\r\n          \"name\": \"maxlength\",\r\n          \"validator\": \"maxLength\",\r\n          \"value\": 500,\r\n          \"message\": \"Bio cannot exceed 500 characters\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"date\",\r\n      \"label\": \"Birth Date\",\r\n      \"name\": \"birthDate\",\r\n      \"value\": \"\",\r\n      \"validations\": [\r\n        {\r\n          \"name\": \"required\",\r\n          \"validator\": \"required\",\r\n          \"message\": \"Birth date is required\"\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  getFormStructure() {\r\n    return this.formStructure;\r\n  }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray, FormControl } from '@angular/forms';\r\nimport { FormService } from './form-service.service';\r\n\r\n@Component({\r\n  selector: 'app-dynamic-form',\r\n  templateUrl: './dynamic-form.component.html',\r\n  styleUrls: ['./dynamic-form.component.css']\r\n})\r\nexport class DynamicFormComponent implements OnInit {\r\n  dynamicForm: FormGroup = this.formBuilder.group({});\r\n\r\n  constructor(private formBuilder: FormBuilder, public formService: FormService) { }\r\n\r\n  ngOnInit() {\r\n    const formStructure = this.formService.getFormStructure();\r\n    let formGroup: Record<string, any> = {};\r\n\r\n    formStructure.forEach((control:any) => {\r\n      if (control.type === 'checkbox-group') {\r\n        // Handle checkbox groups differently\r\n        const checkboxControls: Record<string, FormControl> = {};\r\n        control.options.forEach((option: any) => {\r\n          checkboxControls[option.value] = new FormControl(option.checked || false);\r\n        });\r\n        formGroup[control.name] = this.formBuilder.group(checkboxControls);\r\n      } else {\r\n        // Handle all other controls\r\n        let controlValidators: any[] = [];\r\n\r\n        if (control.validations) {\r\n          control.validations.forEach((validation: any) => {\r\n            switch (validation.validator) {\r\n              case 'required':\r\n                controlValidators.push(Validators.required);\r\n                break;\r\n              case 'email':\r\n                controlValidators.push(Validators.email);\r\n                break;\r\n              case 'minLength':\r\n                controlValidators.push(Validators.minLength(validation.value));\r\n                break;\r\n              case 'maxLength':\r\n                controlValidators.push(Validators.maxLength(validation.value));\r\n                break;\r\n              case 'min':\r\n                controlValidators.push(Validators.min(validation.value));\r\n                break;\r\n              case 'max':\r\n                controlValidators.push(Validators.max(validation.value));\r\n                break;\r\n              case 'pattern':\r\n                controlValidators.push(Validators.pattern(validation.value));\r\n                break;\r\n              // Add more validators as needed\r\n            }\r\n          });\r\n        }\r\n\r\n        formGroup[control.name] = [control.value || '', controlValidators];\r\n      }\r\n    });\r\n\r\n    this.dynamicForm = this.formBuilder.group(formGroup);\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.dynamicForm.valid) {\r\n      console.log('Form Submitted', this.dynamicForm.value);\r\n      // Process form data here\r\n    } else {\r\n      console.log('Form is invalid');\r\n      // Mark all fields as touched to show validation messages\r\n      Object.values(this.dynamicForm.controls).forEach(control => {\r\n        if (control instanceof FormGroup) {\r\n          Object.values(control.controls).forEach(subControl => {\r\n            subControl.markAsTouched();\r\n          });\r\n        } else {\r\n          control.markAsTouched();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getErrorMessage(control: any) {\r\n    const formControl = this.dynamicForm.get(control.name);\r\n\r\n    if (!formControl || !control.validations) {\r\n      return '';\r\n    }\r\n\r\n    for (let validation of control.validations) {\r\n      if (formControl.hasError(validation.name)) {\r\n        return validation.message;\r\n      }\r\n\r\n      // Handle minlength/maxlength errors with their proper error keys\r\n      if (validation.validator === 'minLength' && formControl.hasError('minlength')) {\r\n        return validation.message;\r\n      }\r\n      if (validation.validator === 'maxLength' && formControl.hasError('maxlength')) {\r\n        return validation.message;\r\n      }\r\n      if (validation.validator === 'min' && formControl.hasError('min')) {\r\n        return validation.message;\r\n      }\r\n      if (validation.validator === 'max' && formControl.hasError('max')) {\r\n        return validation.message;\r\n      }\r\n      if (validation.validator === 'pattern' && formControl.hasError('pattern')) {\r\n        return validation.message;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  isCheckboxGroup(control: any): boolean {\r\n    return control.type === 'checkbox-group';\r\n  }\r\n}","<form [formGroup]=\"dynamicForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div *ngFor=\"let control of formService.formStructure\">\r\n    <!-- Text, Email, Number, Password, Textarea, Date -->\r\n    <div *ngIf=\"['text', 'email', 'number', 'password', 'textarea', 'date'].includes(control.type)\">\r\n      <label>{{control.label}}</label>\r\n      <textarea *ngIf=\"control.type === 'textarea'\" \r\n                [formControlName]=\"control.name\"\r\n                [placeholder]=\"control.label\"></textarea>\r\n      <input *ngIf=\"control.type !== 'textarea'\" \r\n             [type]=\"control.type\" \r\n             [formControlName]=\"control.name\"\r\n             [placeholder]=\"control.label\">\r\n      <span *ngIf=\"dynamicForm.controls[control.name]?.invalid && dynamicForm.controls[control.name]?.touched\">\r\n        {{getErrorMessage(control)}}\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Select Dropdown -->\r\n    <div *ngIf=\"control.type === 'select'\">\r\n      <label>{{control.label}}</label>\r\n      <select [formControlName]=\"control.name\">\r\n        <option *ngFor=\"let option of control.options\" [value]=\"option.value\">{{option.label}}</option>\r\n      </select>\r\n      <span *ngIf=\"dynamicForm.controls[control.name]?.invalid && dynamicForm.controls[control.name]?.touched\">\r\n        {{getErrorMessage(control)}}\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Radio Buttons -->\r\n    <div *ngIf=\"control.type === 'radio'\">\r\n      <label>{{control.label}}</label>\r\n      <div *ngFor=\"let option of control.options\" class=\"radio-option\">\r\n        <input type=\"radio\" \r\n               [formControlName]=\"control.name\" \r\n               [value]=\"option.value\"\r\n               [id]=\"control.name + option.value\">\r\n        <label [for]=\"control.name + option.value\">{{option.label}}</label>\r\n      </div>\r\n      <span *ngIf=\"dynamicForm.controls[control.name]?.invalid && dynamicForm.controls[control.name]?.touched\">\r\n        {{getErrorMessage(control)}}\r\n      </span>\r\n    </div>\r\n\r\n    <!-- Single Checkbox -->\r\n    <div *ngIf=\"control.type === 'checkbox'\">\r\n      <label class=\"checkbox-label\">\r\n        <input type=\"checkbox\" [formControlName]=\"control.name\">\r\n        {{control.label}}\r\n      </label>\r\n    </div>\r\n\r\n    <!-- Checkbox Group -->\r\n    <div *ngIf=\"isCheckboxGroup(control)\">\r\n      <label>{{control.label}}</label>\r\n      <div formGroupName=\"{{control.name}}\">\r\n        <div *ngFor=\"let option of control.options\" class=\"checkbox-option\">\r\n          <input type=\"checkbox\" \r\n                 [formControlName]=\"option.value\"\r\n                 [id]=\"control.name + option.value\">\r\n          <label [for]=\"control.name + option.value\">{{option.label}}</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <button type=\"submit\" [disabled]=\"dynamicForm.invalid\">Submit</button>\r\n</form>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DynamicFormComponent } from './dynamic-form.component';\n\n\n\n@NgModule({\n  declarations: [\n    DynamicFormComponent\n  ],\n  imports: [CommonModule, ReactiveFormsModule],\n  exports: [\n    DynamicFormComponent\n  ]\n})\nexport class DynamicFormModule { }\n","/*\n * Public API Surface of dynamic-form\n */\n\nexport * from './lib/dynamic-form.service';\nexport * from './lib/dynamic-form.component';\nexport * from './lib/dynamic-form.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.FormService"],"mappings":"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"}